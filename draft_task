#include <iostream>
#include <algorithm>
#include <thread>
#include <string>
#include <cmath>
#include <fstream>
#include <sstream>
#include <functional>




using namespace std;



class Task
{
 private:


     std :: string Input_string_Ft;
     ofstream filestr = ofstream("test.txt");




 public:

     struct greater
      {

               template<class T>
               bool operator()(T const& a, T const& b) const { return a > b; }


     };

     void get_string()
     {
         std::cout << "Введите строку, которая состоит только из цифр и не превышает 64 символа: ";
         std::cin >> Input_string_Ft;
     }
  
    void replacing_num()
    {
      
        string KB = "KB";
        const char* y = "KB";
        string new_numbers; //Строка для преобразований
        new_numbers.resize(1); //Задаем размер строки
       
        new_numbers[0] = Input_string_Ft[0];
       
        int j = 1; //j - Индекс строки Input_string_Ft;
        int i = 1; // i - Индекс строки new_numbers
       
        for (int k = 0; k < Input_string_Ft.size(); k++)
        {
            if ((k + 1) % 2 == 0)
            {
                new_numbers.insert(i, KB);
                i++; //увеличиваем индекс new_number на 2 т.к. добавили 2 символа
                i++;
                j++; //т.к. заменили цифру на символы, увеличиваем индекс на 1
            }
            else
            {
                new_numbers.insert(i++, Input_string_Ft, j++, 1); //Вставляем цифры в new_numbers на место нечетных эл-в
            }
            Input_string_Ft = new_numbers; //Присваиваем строке numbers данные строки new_numbers
        }
              
       
        /*for (int i = 0; i < Input_string_Ft.size(); i++)
        {
            if (Input_string_Ft[i] % 2 == 0)
            {
                //Input_string_Ft[i] = KB;
               // Input_string_Ft[i] = y[0];
               // Input_string_Ft[i] += y[1];
                
            }
            cout << Input_string_Ft[i] << "\t";
        }
        */
       
       
    }

    

  
    void string_num_check()
    {
        int result = 0; // if result > 1, find error;

        if (Input_string_Ft.size() > 64)
        {
            result++;
            cout << "Размер больше 64 символов!";
        }
        for (int i = 0; i < Input_string_Ft.size(); i++)
        {
            if (isdigit(Input_string_Ft[i]))
            {
                continue;
                
            }
            else
            {
                cout << "Строка должна состоять только из цифр!";
                result = 1;
                break;
            }
        }
    }

    void send_to_file()
    {
        string line = " ";

        {
            string line = " ";
            if (filestr.is_open())
            {

                filestr << Input_string_Ft ;
                filestr.close();
            }
            else
            {
                filestr.open("./test.txt");
                filestr << Input_string_Ft;
                filestr.close();
            }
        }
    }


    void FirstThread()
    {
        

        std::cout << "Начало работы первого потока: " << endl;
              
    }
       
   

  void sort_num()
  {
       int list[Input_string_Ft.size()] = { 0 };
                int i;
                int list_size; //индекс массива и размер массива
                for (i = 0; i < Input_string_Ft.size(); i++) //конвертируем строки в целлые числа в массиве
                    {
                        list[i] = list[i] * 10 + (Input_string_Ft[i] - 48); 
                    }
                list_size = sizeof(list)/sizeof(list[0]);
                
                sort(list, list+list_size, std::greater<int>()); //сортировка 

            
                ostringstream os; //Создаем поток, для преобразования массива int в строку
                for (int j: list)
                {
                    os<<j; //передача массива в поток ostringstream
                }
                string send_Input_string_Ft(os.str()); //Запись потока в строку
                
                Input_string_Ft = send_Input_string_Ft;
  }
};

class Task_2
{
    private:
    
     std :: string Input_string_Ft_2;
    
    public:
    int sum = 0;
    
    void get_file()
    {
        ifstream infile("./test.txt");
        
        infile>>Input_string_Ft_2;
        
        infile.close();
        
        ofstream toclearfile = ofstream("./test.txt");
        
        toclearfile.close();
        
    }
    
    void sum_of_string() // находим сумму строки, которая передана из файла
    {
        int i = 0;
        int j = 0;
        
        int list[Input_string_Ft_2.size()] = {};
        // Чтобы посчитать сумму, нам надо KB не считать с другими числами. Isdigit поможет с этим
        // Перед суммой будем проверять каждый символ на соответсвие числу
        //Функция isdigit() возвращает: ненулевое целочисленное значение (истина), если значение цифра
        // целое число ноль (ложь), если значение не является цифрой

        for( i = 0; i <  Input_string_Ft_2.size(); i++) // повторяем то же самое, что и в первом классе task
        {
            if(isdigit(Input_string_Ft_2[i]))
            {
                
                list[j] = list[j] * 10 + (Input_string_Ft_2[i] - 48);
                j++;
                
            }
        }
        
        for (i = 0; i < j; i++) // и находим сумму 
        
        { 
                    sum += list[i]; 
        } 
        
        // надо отправить сумму на вторую программу
    }
    
};






int main()

{
    setlocale(LC_ALL, "Russian");
    char* buffer = new char[256];
    
    Task task;
    Task_2 task_2;
    
    task.get_string();
    task.string_num_check();
    task.sort_num();
    task.replacing_num();
    task.send_to_file();
    
    task_2.get_file();
    task_2.sum_of_string();
    // здесь надо поместить в буфер
    

    
   
    //  Должна быть проверка, что строка состоит только из цифр и не превышает 64 символа. 
                              //  вызываем проверку на исключительность цифр в string



    /*После данная строка помещается в общий буфер
    и поток должен ожидать дальнейшего ввода пользователя.*/



    delete[] buffer;
    return 0;
}
